// 22. Generate Parentheses
// Medium

// Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

// Example 1:

// Input: n = 3
// Output: ["((()))","(()())","(())()","()(())","()()()"]
// Example 2:

// Input: n = 1
// Output: ["()"]
 
// Constraints:

// 1 <= n <= 8

class Solution {
    public List<String> generateParenthesis(int n) {
        List<String> result = new ArrayList<>();
        backtrack(n, 0, 0, "", result);
        return result;
    }

    void backtrack(int n, int open, int close, String curr, List<String> result) {
        if (curr.length() == 2 * n) {
            result.add(curr);
            return;
        }
        if (open < n)
            backtrack(n, open + 1, close, curr + "(", result);
        if (close < open)
            backtrack(n, open, close + 1, curr + ")", result);
    }
}
