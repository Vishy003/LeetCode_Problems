// 169. Majority Element
// Easy
// Given an array nums of size n, return the majority element.

// The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

// Example 1:

// Input: nums = [3,2,3]
// Output: 3
// Example 2:

// Input: nums = [2,2,1,1,1,2,2]
// Output: 2
 

// Constraints:

// n == nums.length
// 1 <= n <= 5 * 104
// -109 <= nums[i] <= 109

import java.util.*;

public class Solution {
    public static int majorityElement(int[] v) {
        int n = v.length;
        int count = 0;
        int candidate = 0;

        // Phase 1: Find potential candidate
        for (int i = 0; i < n; i++) {
            if (count == 0) {
                candidate = v[i];
                count = 1;
            } else if (v[i] == candidate) {
                count++;
            } else {
                count--;
            }
        }

        // Phase 2: Verify candidate (optional since majority always exists)
        int freq = 0;
        for (int i = 0; i < n; i++) {
            if (v[i] == candidate) freq++;
        }

        return (freq > n / 2) ? candidate : -1;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();           // Number of elements
        int[] arr = new int[n];         // Input array
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }

        int ans = majorityElement(arr);
        System.out.println(ans);

        sc.close();
    }
}

